Ch 3 P. 43

Array: Shuffle

function shuffle(arr){
	var temp;
	for(var x = 0; x<arr.length; x++){
  	randIdx = Math.floor(Math.random() * arr.length)
    temp = arr[x];
    arr[x] = arr[randIdx];
    arr[randIdx] = temp;
  }
  console.log(arr);
}


Array: Remove Range

function remRange(arr, start, end){
	range = (end-start) + 1;
  arr.splice(start, range);
  console.log(arr);
}

function remRange(arr, start, end){
	var cudiParty = end+1;
  var temp;
	for(var x = start; x<=end; x++){
  	if(arr[cudiParty] == undefined){
    	break;
    }
    temp = arr[x];
    arr[x] = arr[cudiParty];
    arr[cudiParty] = temp;
    cudiParty++;
  }
  var runCheck = end+1;
  while(arr[cudiParty] !== undefined){
  	temp = arr[runCheck];
    arr[runCheck] = arr[cudiParty];
    cudiParty++;
    runCheck++;
  }
  var lGoal = arr.length - ((end-start) + 1);
  while(arr.length !== lGoal){
  	arr.pop();
  }
  return arr;
}

Intermediate Sums

function insertAt(arr, idx, val){
  arr[arr.length] = val;
  for(var i = arr.length-1; i>idx; i--){
    var temp = arr[i];
    arr[i] = arr[i-1];
    arr[i-1] = temp;
  }
  return arr;
}

function addSum(arr){
  var intSum = 0;
  if(arr.length < 10){
    for(i = 0; i<arr.length; i++){
      intSum = intSum + arr[i];
    }
    arr[arr.length] = intSum;
    return arr
  }
  else{
    for(i = 0; i<arr.length; i++){
      intSum = intSum + arr[i];
      if((i+1)%10 == 0){
        insertAt(arr, i+1, intSum);
        i = i+2;
        intSum = arr[i]
      }
      if(i == arr.length-1){
        break;
      }
    }
    arr[arr.length]=intSum;
    return arr
  }
}
    
Double Trouble

function insertAt(arr, idx, val){
  arr[arr.length] = val;
  for(var i = arr.length-1; i>idx; i--){
    var temp = arr[i];
    arr[i] = arr[i-1];
    arr[i-1] = temp;
  }
  return arr;
}


function dubs(arr){
  for(i =0; i<arr.length; i++){
    insertAt(arr, i+1, arr[i]);
    i = i+1
  }
  return arr
}    

Zip It

function zip(arr1, arr2){
  zipped = [];
  if(arr1.length>=arr2.length){
    for(i = 0; i<arr2.length; i++){
      zipped.push(arr1[i]);
      zipped.push(arr2[i]);
    }
    for(j = i; j<arr1.length; j++){
      zipped.push(arr1[j])
    }
    return zipped
  } else {
    for(i = 0; i<arr1.length; i++){
      zipped.push(arr1[i]);
      zipped.push(arr2[i]);
    }
    for(j = i; j<arr2.length; j++){
      zipped.push(arr2[j])
    }
    return zipped
  }
}
	Second

function insertAt(arr, idx, val){
  arr[arr.length] = val;
  for(var i = arr.length-1; i>idx; i--){
    var temp = arr[i];
    arr[i] = arr[i-1];
    arr[i-1] = temp;
  }
  return arr;
}

function zip(arr1, arr2){
  if(arr1.length>=arr2.length){
    var j = 0
    var i = 0
    while(j<arr2.length){
      insertAt(arr1, i+1, arr2[j])
      i = i + 2
      j = j + 1
    }
    return arr1
  } else {
    var j = 0
    for(i = 0; i<arr1.length; i++){
      insertAt(arr1, i+1, arr2[j])
      i = i +1
      j = j + 1
    }
    for(k = j; k<arr2.length; k++){
      arr1.push(arr2[k])
    }
    return arr1
  }
}
